when editting or creating a new chemical, below are all the fields we will need,
during edits, the default value from the database should be poining from these as well,

or update opening fieds is correctly pointing correctly and its what we edit and save accordingly, 
sothis form rerquires to be updated and point correctly, 
[ChemicalsIndex
: 
"10"
CostperKgLt
: 
100
Description
: 
"AntiFoam"
ID
: 
1
QuantityonHand
: 
29
SSMA_TimeStamp
: 
{type: 'Buffer', data: Array(8)}
SellingUnits
: 
20
SupplierItemCode
: 
"33078387"
SupplierName
: 
"Brenntag"
UnitCost
: 
2000
UnitCostgm
: 
0.1
UnitofMeasure
: 
"kilogram (kg)"
VATCostKg
: 
116
VATCostgm
: 
0.116
VATUnitCost
: 
2320]



here isa the form that we need to update, 
"use client";

import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { toast } from "sonner";
import { Pencil, Trash2, Plus } from "lucide-react";

export default function ChemicalsForm() {
  const [rows, setRows] = useState([]);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);

  // Manage modal state
  const [manageOpen, setManageOpen] = useState(false);
  const [chemicals, setChemicals] = useState([]);
  const [confirmDelete, setConfirmDelete] = useState(null);

  // Add/Edit modal state
  const [editingIdx, setEditingIdx] = useState(null); // index or "new"
  const [formData, setFormData] = useState({});

  // ðŸ”¹ Define all the editable columns in the Chemicals table
  const chemicalFields = [
    { key: "Description", label: "Description", type: "text" },
    { key: "QuantityOnHand", label: "Quantity on Hand", type: "number" },
    { key: "UnitOfMeasure", label: "Unit of Measure", type: "text" },
    { key: "CostPerKgLt", label: "Cost per Kg/Lt", type: "number" },
    { key: "Supplier", label: "Supplier", type: "text" },
    { key: "ReorderLevel", label: "Reorder Level", type: "number" },
    { key: "ReorderQuantity", label: "Reorder Quantity", type: "number" },
    // ðŸ”¹ add more fields based on SSMS output
  ];

  // Fetch chemicals
  useEffect(() => {
    async function fetchChemicals() {
      try {
        const res = await fetch("/api/chemicals-stock");
        if (!res.ok) throw new Error("Failed to fetch chemicals");
        const data = await res.json();

        setChemicals(data);
        console.log(data)
        // Keep QuantityOnHand so Opening shows correctly
        setRows(
          data.map((chem) => ({
            ...chem,
            in: "",
            out: "",
            balance: "",
          }))
        );
      } catch (err) {
        console.error(err);
        toast.error("Could not load chemicals");
      } finally {
        setLoading(false);
      }
    }

    fetchChemicals();
  }, []);

  const handleChange = (index, field, value) => {
    setRows((prev) =>
      prev.map((row, i) => (i === index ? { ...row, [field]: value } : row))
    );
  };

  // Save stock updates
  const handleSubmit = async (e) => {
    e.preventDefault();
    setSaving(true);
    try {
      toast.success("Chemicals Stock data updated (frontend only).");
    } catch (err) {
      console.error(err);
      toast.error("Could not update chemicals stock data");
    } finally {
      setSaving(false);
    }
  };

  // Delete
  const confirmDeleteChemical = async () => {
    if (!confirmDelete) return;
    setChemicals((prev) =>
      prev.filter((c) => c.Description !== confirmDelete)
    );
    setRows((prev) => prev.filter((r) => r.Description !== confirmDelete));
    toast.success(`Deleted chemical: ${confirmDelete}`);
    setConfirmDelete(null);
  };

  if (loading) {
    return (
      <div className="flex flex-col items-center justify-center mt-20 ">
        <div className="animate-spin h-7 w-7 border-4 border-blue-500 border-t-transparent rounded-full"></div>
        <p className="mt-4 text-sm font-medium text-gray-700">
          Loading Chemicals Stock Data...
        </p>
      </div>
    );
  }

  return (
    <form
      onSubmit={handleSubmit}
      className="space-y-4 border rounded-xl bg-slate-50 p-5 shadow-md mb-12"
    >
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3">
        <h2 className="font-semibold text-blue-700 text-lg">
          Update Chemicals
        </h2>

        {/* Manage Chemicals Modal */}
        <Dialog open={manageOpen} onOpenChange={setManageOpen}>
          <DialogTrigger asChild>
            <Button variant="outline">Manage Chemicals</Button>
          </DialogTrigger>

          <DialogContent className="max-w-3xl max-h-[80vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>Chemicals Master List</DialogTitle>
            </DialogHeader>

            <div className="space-y-3">
              {chemicals.length === 0 && (
                <p className="text-sm text-slate-500">No chemicals found.</p>
              )}

              {chemicals.map((chem, idx) => (
                <div
                  key={idx}
                  className="flex items-center justify-between gap-3 border rounded-md p-2 bg-white"
                >
                  <span className="text-sm">{chem.Description}</span>
                  <div className="flex items-center gap-2">
                    <Button
                      type="button"
                      size="icon"
                      variant="ghost"
                      onClick={() => {
                        setEditingIdx(idx);
                        setFormData(chem);
                      }}
                      title="Edit"
                    >
                      <Pencil size={16} />
                    </Button>
                    <Button
                      type="button"
                      size="icon"
                      variant="ghost"
                      onClick={() => setConfirmDelete(chem.Description)}
                      title="Delete"
                    >
                      <Trash2 size={16} className="text-red-500" />
                    </Button>
                  </div>
                </div>
              ))}
            </div>

            {/* Add New Chemical Button */}
            <div className="mt-4">
              <Button
                onClick={() => {
                  setEditingIdx("new");
                  setFormData({});
                }}
              >
                <Plus size={14} className="mr-1" /> Add New Chemical
              </Button>
            </div>
          </DialogContent>
        </Dialog>

        {/* Add/Edit Chemical Modal */}
        <Dialog open={editingIdx !== null} onOpenChange={() => setEditingIdx(null)}>
          <DialogContent className="max-w-3xl max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>
                {editingIdx === "new" ? "Add New Chemical" : "Edit Chemical"}
              </DialogTitle>
            </DialogHeader>

            <form
              className="space-y-4"
              onSubmit={(e) => {
                e.preventDefault();
                if (editingIdx === "new") {
                  setChemicals((prev) => [...prev, formData]);
                  setRows((prev) => [...prev, { ...formData, in: "", out: "", balance: "" }]);
                  toast.success("New chemical added (frontend only).");
                } else {
                  setChemicals((prev) =>
                    prev.map((c, i) => (i === editingIdx ? formData : c))
                  );
                  setRows((prev) =>
                    prev.map((r, i) => (i === editingIdx ? { ...formData, in: r.in, out: r.out, balance: r.balance } : r))
                  );
                  toast.success("Chemical updated (frontend only).");
                }
                setEditingIdx(null);
              }}
            >
              {chemicalFields.map((field) => (
                <div key={field.key}>
                  <label className="block text-sm font-medium">
                    {field.label}
                  </label>
                  <input
                    type={field.type}
                    className="w-full border rounded-md px-2 py-1 text-sm"
                    value={formData[field.key] || ""}
                    onChange={(e) =>
                      setFormData({ ...formData, [field.key]: e.target.value })
                    }
                  />
                </div>
              ))}

              <div className="flex justify-end gap-2 pt-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setEditingIdx(null)}
                >
                  Cancel
                </Button>
                <Button type="submit">
                  {editingIdx === "new" ? "Add Chemical" : "Save Changes"}
                </Button>
              </div>
            </form>
          </DialogContent>
        </Dialog>
      </div>

      {/* Editable Table */}
      <div className="overflow-x-auto">
        <table className="w-full border-collapse border text-sm">
          <thead className="bg-slate-200">
            <tr>
              <th className="border px-2 py-1 text-left">Item Description</th>
              <th className="border px-2 py-1">Opening</th>
              <th className="border px-2 py-1">In</th>
              <th className="border px-2 py-1">Out</th>
              <th className="border px-2 py-1">Balance</th>
            </tr>
          </thead>
          <tbody>
            {rows.map((row, i) => (
              <tr key={i} className="bg-white even:bg-slate-50">
                <td className="border px-2 py-1">{row.Description}</td>
                <td className="border px-2 py-1">
                  <input
                    type="number"
                    value={row.QuantityonHand}
                    onChange={(e) => handleChange(i, "in", e.target.value)}
                    className="w-full border rounded-md px-2 py-1 text-sm"
                  />
                </td>
                <td className="border px-2 py-1">
                  <input
                    type="number"
                    value={row.in}
                    onChange={(e) => handleChange(i, "in", e.target.value)}
                    className="w-full border rounded-md px-2 py-1 text-sm"
                  />
                </td>
                <td className="border px-2 py-1">
                  <input
                    type="number"
                    value={row.out}
                    onChange={(e) => handleChange(i, "out", e.target.value)}
                    className="w-full border rounded-md px-2 py-1 text-sm"
                  />
                </td>
                <td className="border px-2 py-1">
                  <input
                    type="number"
                    value={row.balance}
                    onChange={(e) => handleChange(i, "balance", e.target.value)}
                    className="w-full border rounded-md px-2 py-1 text-sm"
                  />
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <Button type="submit" disabled={saving}>
        {saving ? "Saving..." : "Save Updates"}
      </Button>

      {/* Delete Confirmation */}
      <AlertDialog
        open={!!confirmDelete}
        onOpenChange={() => setConfirmDelete(null)}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Chemical</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete{" "}
              <span className="font-semibold">{confirmDelete}</span>? This action
              cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={() => setConfirmDelete(null)}>
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction
              className="bg-red-500 hover:bg-red-600"
              onClick={confirmDeleteChemical}
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </form>
  );
}
