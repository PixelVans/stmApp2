here, there is a proble, if someone comes in at 4am and leaves at 5am, we wil not beable to know its night shift unless
we write in 24hrs format, so, can we use a time format that has pm or am, and then auto converts for us?
instead of the curent opne we arte using? 
import React, { useEffect, useState } from "react";

export default function UpdateMusterRoll() {
  const [employees, setEmployees] = useState([]);
  const [selectedEmployee, setSelectedEmployee] = useState("");
  const [attendanceData, setAttendanceData] = useState([]);

  // Generate dates from 25th of current month to 26th of next month
  const generateDateRange = () => {
    const today = new Date();
    const startDate = new Date(today.getFullYear(), today.getMonth(), 26);
    const endDate = new Date(today.getFullYear(), today.getMonth() + 1, 27);

    const dates = [];
    for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
      dates.push(new Date(d));
    }
    return dates;
  };

  const dateRange = generateDateRange();

  // Fetch all employees
  useEffect(() => {
    async function fetchEmployees() {
      try {
        const res = await fetch("/api/employees");
        if (!res.ok) throw new Error("Failed to fetch employees");
        const data = await res.json();
        setEmployees(data);
      } catch (err) {
        console.error(err);
      }
    }
    fetchEmployees();
  }, []);

  // Handle time changes
  const handleTimeChange = (index, field, value) => {
    const updated = [...attendanceData];
    updated[index] = { ...updated[index], [field]: value };
    setAttendanceData(updated);
  };

  // Helper: check if date is Sunday to insert week break
  const isSunday = (date) => date.getDay() === 0; 

  return (
    <div className="p-6 bg-gray-50 min-h-screen">
      <h1 className="text-3xl  text-center mx-auto font-semibold text-gray-800 mb-6">
        Update Muster Roll
      </h1>

      {/* Employee Selector */}
      <div className="flex items-center mx-auto gap-3 mb-6">
        <label className="font-medium  text-gray-700">Select Employee:</label>
        <select
          className="border border-gray-300 px-3 py-2 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-400"
          value={selectedEmployee}
          onChange={(e) => setSelectedEmployee(e.target.value)}
        >
          <option value="">-- Select Employee --</option>
          {employees.map((emp) => (
            <option key={emp.ID} value={emp.ID}>
              {emp.FirstName} {emp.LastName}
            </option>
          ))}
        </select>
      </div>

      {/* Attendance Table */}
      <div className="bg-white max-w-xl rounded-xl shadow-lg overflow-hidden border border-gray-200">
        <table className="w-full text-sm">
          <thead className="bg-blue-100 text-gray-700 uppercase">
            <tr>
              <th className="px-3 py-2 text-left w-24">Day</th>
              <th className="px-3 py-2 text-left w-32">Date</th>
              <th className="px-3 py-2 text-left">Time In</th>
              <th className="px-3 py-2 text-left">Time Out</th>
            </tr>
          </thead>
          <tbody>
            {dateRange.map((date, index) => (
              <React.Fragment key={index}>
                <tr
                  className={`${
                    index % 2 === 0 ? "bg-gray-50" : "bg-white"
                  } hover:bg-blue-50 transition`}
                >
                  <td className="border-t px-3 py-2 font-medium text-gray-800">
                    {date.toLocaleDateString("en-US", { weekday: "short" })}
                  </td>
                  <td className="border-t px-3 py-2 text-gray-700">
                    {date.toISOString().split("T")[0]}
                  </td>
                  <td className="border-t px-3 py-2">
                    <input
                      type="time"
                      className="border border-gray-300 rounded-lg px-2 py-1 w-full focus:ring-2 focus:ring-blue-400"
                      onChange={(e) =>
                        handleTimeChange(index, "TimeIn", e.target.value)
                      }
                    />
                  </td>
                  <td className="border-t px-3 py-2">
                    <input
                      type="time"
                      className="border border-gray-300 rounded-lg px-2 py-1 w-full focus:ring-2 focus:ring-blue-400"
                      onChange={(e) =>
                        handleTimeChange(index, "TimeOut", e.target.value)
                      }
                    />
                  </td>
                </tr>

                {/* Week Break */}
                {isSunday(date) && (
                  <tr>
                    <td colSpan="4" className="bg-gray-200 h-2"></td>
                  </tr>
                )}
              </React.Fragment>
            ))}
          </tbody>
        </table>
      </div>

      <div className="mt-6 flex justify-end">
        <button
          onClick={() => console.log("Save attendance", attendanceData)}
          className="bg-blue-600 text-white font-medium px-6 py-2 rounded-lg shadow hover:bg-blue-700 transition"
        >
          Save Attendance
        </button>
      </div>
    </div>
  );
}


our sCHEMA LOOKS LIKE THIS, SO SETTING THE PM OR AM, IS WHAT WE WILL USE TO KNOW THE 24HRS,
an update
ALTER TABLE Attendance
ADD TimeInFull DATETIME NULL,
    TimeOutFull DATETIME NULL;


previous versions
-- Create the Employees table
CREATE TABLE Employees (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    EmployerID VARCHAR(50) UNIQUE NOT NULL,
    FirstName NVARCHAR(100),
    LastName NVARCHAR(100),
    RegularHours DECIMAL(10,2) DEFAULT 0,
    DirectOverTime DECIMAL(10,2) DEFAULT 0,
    SundayHours DECIMAL(10,2) DEFAULT 0,
    LeaveHours DECIMAL(10,2) DEFAULT 0,
    SickHours DECIMAL(10,2) DEFAULT 0,
    HolidayHours DECIMAL(10,2) DEFAULT 0,
    NightshiftAllowance DECIMAL(10,2) DEFAULT 0,
    CompanyLoan DECIMAL(10,2) DEFAULT 0,
    ProductDeductions DECIMAL(10,2) DEFAULT 0,
    SalaryDeduction DECIMAL(10,2) DEFAULT 0,
    LoanRepayment DECIMAL(10,2) DEFAULT 0,
    TotalHours DECIMAL(10,2) DEFAULT 0,
    SalaryAdvance1 DECIMAL(10,2) DEFAULT 0,
    SalaryAdvance2 DECIMAL(10,2) DEFAULT 0,
    SalaryAdvance3 DECIMAL(10,2) DEFAULT 0,
    SalaryAdvance4 DECIMAL(10,2) DEFAULT 0,
    SalaryAdvance5 DECIMAL(10,2) DEFAULT 0,
    SalaryAdvance6 DECIMAL(10,2) DEFAULT 0,
    SalaryAdvance7 DECIMAL(10,2) DEFAULT 0,
    TotalAdvances DECIMAL(10,2) DEFAULT 0,
    Advance1 DECIMAL(10,2) DEFAULT 0,
    Advance2 DECIMAL(10,2) DEFAULT 0,
    Advance3 DECIMAL(10,2) DEFAULT 0,
    Advance4 DECIMAL(10,2) DEFAULT 0,
    Advance5 DECIMAL(10,2) DEFAULT 0,
    Advance6 DECIMAL(10,2) DEFAULT 0,
    Advance7 DECIMAL(10,2) DEFAULT 0,
    SSMA_TimeStamp ROWVERSION,
    created_at DATETIME DEFAULT GETDATE(),
    updated_at DATETIME DEFAULT GETDATE()
);
GO

-- Create the Attendance table
CREATE TABLE Attendance (
    AttendanceID INT IDENTITY(1,1) PRIMARY KEY,
    EmployeeID INT NOT NULL,
    AttendanceDate DATE NOT NULL,
    TimeIn TIME,
    TimeOut TIME,
    TotalHoursWorked AS 
        CASE 
            WHEN TimeIn IS NOT NULL AND TimeOut IS NOT NULL 
            THEN CAST(DATEDIFF(MINUTE, TimeIn, TimeOut) / 60.0 AS DECIMAL(5,2))
            ELSE 0 
        END,
    Status VARCHAR(20) DEFAULT 'Present',
    SickLeave BIT DEFAULT 0,
    Leave BIT DEFAULT 0,
    MaternityLeave BIT DEFAULT 0,
    IsHoliday BIT DEFAULT 0,
    HolidayName NVARCHAR(100) NULL,
    Remarks NVARCHAR(255),
    CreatedAt DATETIME DEFAULT GETDATE(),
    UpdatedAt DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (EmployeeID) REFERENCES Employees(ID)
);
GO




