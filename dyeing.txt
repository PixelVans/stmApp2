yes, do so currently its all in C:\stmdev\stmApp\client\src\pages\dyeing.jsx
ChatGPT said:

Alright — here’s how we can break up your dyeing.jsx file into a clean 3-part structure while keeping the "usimwage maji" section and all current logic intact.

1️⃣ Create a step preparation hook

File:
C:\stmdev\stmApp\client\src\hooks\useChemicalSteps.js

import { useMemo } from "react";
import useDyeingStore from "../store/zustand";
import {
  Colour_Chart,
  Dyestuff_1,
  Dyestuff_2,
  Dyestuff_3,
  Dyestuff_4,
  Dyestuff_1_Amt,
  Dyestuff_2_Amt,
  Dyestuff_3_Amt,
  Dyestuff_4_Amt,
} from "../utils/constants";
import {
  computeAmount,
  getDyeingTemp,
  getDyeingPh,
  getDyeingTime,
  getChemicalField,
  computeDyeingSaltAmount,
  getSaltGramsPerL,
  getSaltDynamicTemp,
  getSaltDynamicDuration,
  getRemainInDwell,
  computeStartingWaterAmount,
  getScouringTemp,
  getScouringTime,
  getScouringPH,
  getScouringChemical1,
  getScouringChemical2,
  getScouringChemical3,
  getScouringChemical4,
  getScouringChemical5,
  getScouringChemical7,
  getScouringChemical6,
  getScouringPL,
  getScouringChemicalAmount,
  getgramsPLForHotwash,
  getHotWashTitle1,
  getHotWashTitle2,
  computeRoundedWater80,
  computeHotwashAmount,
  getHotwashTemp,
  getHotwashDuration,
  getHotwashPh,
  getPrepareToDyeTitle1,
  getPrepareToDyeTitle2,
  getPrepareToDyeTitle3,
  getPrepareToDyeGPL1,
  getPrepareToDyeGPL2,
  getPrepareToDyeGPL3,
  getPrepareToDyeAmt,
  getPrepareToDyeAmt1,
  getPrepareToDyeTemp,
  getPrepareToDyeProperty,
} from "../components/functions/dyeingfunc";

export default function useChemicalSteps() {
  const {
    winch,
    scouring,
    saltOption,
    selectedColour,
    saltPosition,
    liqRatio,
    lotWeight,
    dyeingSystem,
  } = useDyeingStore();

  const NBSP = "\u00A0";

  const selectedIndex = useMemo(() => {
    if (!selectedColour) return -1;
    return Colour_Chart.findIndex(
      (color) =>
        typeof color === "string" &&
        typeof selectedColour === "string" &&
        color.trim() === selectedColour.trim()
    );
  }, [selectedColour]);

  const getNameAt = (arr) =>
    selectedIndex === -1 ? "" : arr?.[selectedIndex] ?? "";
  const getAmtAt = (arr) => {
    if (selectedIndex === -1) return "";
    const v = arr?.[selectedIndex];
    return v ?? "";
  };
  const formatNumber = (val) => {
    if (val === "" || val === null || val === undefined) return "";
    const n = Number(val);
    if (Number.isNaN(n)) return String(val);
    return n.toFixed(3);
  };

  const chemical = getChemicalField({
    saltPosition,
    saltOption,
    scouring,
    dyeingSystem,
    selectedColour,
  });

  const waterLitresDyeing = computeStartingWaterAmount({
    lotWeight,
    liqRatio,
    winch,
  });
  const gpl = getPrepareToDyeGPL1(dyeingSystem, selectedColour);
  const dwellValue = getRemainInDwell({
    saltPosition,
    scouringSystemSelected: scouring,
    selectedColour,
  });

  const dyeingRows = [
    {
      chemical: getNameAt(Dyestuff_1),
      gramsPerLt: formatNumber(getAmtAt(Dyestuff_1_Amt)),
      amount: computeAmount(Number(getAmtAt(Dyestuff_1_Amt)), lotWeight),
      temp: getDyeingTemp(scouring, selectedColour, dyeingSystem),
      time: getDyeingTime(selectedColour, dyeingSystem),
      ph: getDyeingPh(selectedColour, dyeingSystem),
    },
    {
      chemical: getNameAt(Dyestuff_2),
      gramsPerLt: formatNumber(getAmtAt(Dyestuff_2_Amt)),
      amount: computeAmount(Number(getAmtAt(Dyestuff_2_Amt)), lotWeight),
      temp: "",
      time: "",
      ph: "",
    },
    {
      chemical: getNameAt(Dyestuff_3),
      gramsPerLt: formatNumber(getAmtAt(Dyestuff_3_Amt)),
      amount: computeAmount(Number(getAmtAt(Dyestuff_3_Amt)), lotWeight),
      temp: "",
      time: "",
      ph: "",
    },
    {
      chemical: getNameAt(Dyestuff_4),
      gramsPerLt: formatNumber(getAmtAt(Dyestuff_4_Amt)),
      amount: computeAmount(Number(getAmtAt(Dyestuff_4_Amt)), lotWeight),
      temp: "",
      time: "",
      ph: "",
    },
    { isInstructionRow: true, chemical: dwellValue ?? "" },
    {
      chemical: chemical,
      gramsPerLt: Number(
        getSaltGramsPerL({ chemicalName: chemical, selectedColour })
      ).toFixed(3),
      amount: computeDyeingSaltAmount({
        chemicalName: chemical,
        selectedColour,
        saltPosition,
        scouring,
        waterLitresDyeing: waterLitresDyeing.toFixed(3),
        lotWeight,
      }),
      temp: getSaltDynamicTemp({ selectedColour, scouring }),
      time: getSaltDynamicDuration({ selectedColour }),
      ph: "",
      rowSpanGroup: "salt",
    },
    {
      chemical: "Total Shade Percentage",
      gramsPerLt: (
        Number(formatNumber(getAmtAt(Dyestuff_1_Amt))) +
        Number(formatNumber(getAmtAt(Dyestuff_2_Amt))) +
        Number(formatNumber(getAmtAt(Dyestuff_3_Amt))) +
        Number(formatNumber(getAmtAt(Dyestuff_4_Amt)))
      ).toFixed(3),
      rowSpanGroupContinuation: "salt",
    },
  ];

  const usimwageMajiRows = [
    { chemical: "Chemical X", gramsPerLt: "1.000", amount: "10g" },
    { chemical: "Chemical Y", gramsPerLt: "2.000", amount: "20g" },
    { chemical: "Chemical Z", gramsPerLt: "3.000", amount: "30g" },
  ];

  return [
    {
      step: "Step 1 — Scouring",
      rows: [
        {
          chemical: getScouringChemical1({ scouringSystem: scouring }),
          amount: `${waterLitresDyeing} Ltrs`,
          temp: getScouringTemp({ selectedColour, scouring }),
          time: getScouringTime({ selectedColour }),
          ph: getScouringPH({ selectedColour, scouring }),
        },
        {
          chemical: getScouringChemical2({ scouringSystem: scouring }),
          gramsPerLt: getScouringPL(scouring, selectedColour, 2),
          amount: getScouringChemicalAmount(
            scouring,
            selectedColour,
            2,
            lotWeight,
            liqRatio,
            winch
          ),
        },
        // ...other scouring chemicals
      ],
    },
    {
      step: "Step 2 — Hot Wash",
      rows: [
        { chemical: "" },
        {
          chemical: getHotWashTitle1(dyeingSystem),
          amount: `${computeRoundedWater80({
            lotWeight,
            liqRatio,
            winch,
          })} Ltrs`,
          temp: getHotwashTemp(selectedColour, dyeingSystem),
          time: getHotwashDuration(selectedColour, dyeingSystem),
          ph: getHotwashPh(selectedColour, dyeingSystem),
        },
        {
          chemical: getHotWashTitle2(dyeingSystem),
          gramsPerLt: getgramsPLForHotwash(selectedColour, dyeingSystem),
          amount: computeHotwashAmount({
            selectedColour,
            dyeingSystem,
            lotWeight,
            liqRatio,
            winch,
          }),
        },
      ],
    },
    {
      step: "Step 3 — Prepare to Dye",
      instructions:
        "ONGEZA ACID KWANZA ALAFU BAADA YA DAKIKA KUMI ONGEZA PEROXIDE KILLER",
      rows: [
        { chemical: "" },
        {
          chemical: getPrepareToDyeTitle1(scouring),
          gramsPerLt: getPrepareToDyeGPL1(dyeingSystem, selectedColour),
          amount: getPrepareToDyeAmt1({
            gpl,
            dyeingSystem,
            lotWeight,
            waterLitresDyeing,
          }),
          temp: getPrepareToDyeTemp({ scouring, dyeingSystem, selectedColour }),
          time: getPrepareToDyeProperty(21, dyeingSystem, selectedColour),
          ph: getPrepareToDyeProperty(22, dyeingSystem, selectedColour),
        },
      ],
    },
    {
      step: "Step 4 — Dyeing",
      extraSection: { title: "usimwage maji", rows: usimwageMajiRows },
      instructions:
        "ONGEZA 50% YA RANGI — ALAFU BAADA YA DAKIKA KUMI ONGEZA 50%",
      rows: dyeingRows,
    },
  ];
}

2️⃣ Generic Table Component

File:
C:\stmdev\stmApp\client\src\components\ChemicalStepTable.jsx

import React from "react";

export default function ChemicalStepTable({ rows }) {
  const NBSP = "\u00A0";

  return (
    <table className="table-auto border-collapse border border-gray-300 w-full text-sm">
      <thead>
        <tr className="bg-gray-200">
          <th className="border px-2 py-1 text-left">Chemical</th>
          <th className="border px-2 py-1 text-right">Grams/lt</th>
          <th className="border px-2 py-1 text-left">Amount</th>
          <th className="border px-2 py-1 text-left">Temp</th>
          <th className="border px-2 py-1 text-left">Time</th>
          <th className="border px-2 py-1 text-left">pH</th>
        </tr>
      </thead>
      <tbody>
        {rows.map((r, i) => {
          const chemText = (r.chemical || "").toString().toUpperCase().trim();
          const isInstructionRow =
            !!r.isInstructionRow ||
            chemText.includes("REMAIN IN DWELL") ||
            chemText.includes("WAIT FOR") ||
            chemText === "E" ||
            chemText.includes("20 MIN");

          if (isInstructionRow) {
            return (
              <tr key={i}>
                <td colSpan={6} className="border p-0">
                  <div className="bg-yellow-200 h-12 w-full flex items-center justify-center font-bold">
                    {r.chemical || NBSP}
                  </div>
                </td>
              </tr>
            );
          }

          return (
            <tr key={i} className={i % 2 === 0 ? "bg-white" : "bg-gray-50"}>
              <td className="border px-2 py-1">{r.chemical || NBSP}</td>
              <td className="border px-2 py-1 text-right">
                {r.gramsPerLt || NBSP}
              </td>
              <td className="border px-2 py-1">{r.amount || NBSP}</td>
              <td className="border px-2 py-1">{r.temp || NBSP}</td>
              <td className="border px-2 py-1">{r.time || NBSP}</td>
              <td className="border px-2 py-1">{r.ph || NBSP}</td>
            </tr>
          );
        })}
      </tbody>
    </table>
  );
}

3️⃣ Updated Main Page

File:
C:\stmdev\stmApp\client\src\pages\dyeing.jsx

import React from "react";
import DyeingControlPanel from "../components/DyeingControlPanel";
import useChemicalSteps from "../hooks/useChemicalSteps";
import ChemicalStepTable from "../components/ChemicalStepTable";

export default function ChemicalTable() {
  const steps = useChemicalSteps();

  return (
    <div className="mt-[300px]">
      <DyeingControlPanel />
      {steps.map((step, sIdx) => (
        <div key={sIdx} className="mb-8 p-4 sm:p-6">
          <h2 className="text-lg font-bold mb-2">{step.step}</h2>

          {step.extraSection && (
            <>
              <h3 className="text-md font-semibold mb-2">
                {step.extraSection.title}
              </h3>
              <div className="overflow-x-auto mb-4">
                <ChemicalStepTable rows={step.extraSection.rows} />
              </div>
            </>
          )}

          {step.instructions && (
            <p className="italic text-sm mb-2">{step.instructions}</p>
          )}

          <div className="overflow-x-auto">
            <ChemicalStepTable rows={step.rows} />
          </div>
        </div>
      ))}
    </div>
  );
}


With this split:

useChemicalSteps.js → Handles all logic & calculations

ChemicalStepTable.jsx → Handles generic rendering

dyeing.jsx → Now is just a simple orchestrator